"""
Juego de Cartas - Versi√≥n Optimizada con Arquitectura de 3 Capas
===============================================================

Este archivo es la aplicaci√≥n principal que ejecuta el sistema de torneo de cartas.

ARQUITECTURA IMPLEMENTADA:
- Capa de Base de Datos (database/): Modelos de datos
- Capa de Acceso a Datos (data_access/): Repositorios y conexi√≥n a BD
- Capa de L√≥gica de Negocio (business_logic/): Motor del juego

CONCEPTOS DE CONCURRENCIA:
- 3 procesos: Principal, √Årbitro, Base de Datos
- 5 hilos: Uno por cada jugador
- Sincronizaci√≥n con threading.Events
- Comunicaci√≥n segura con Queue

CARACTER√çSTICAS:
- Separaci√≥n clara de responsabilidades
- Patr√≥n Repository para acceso a datos
- L√≥gica de negocio centralizada
- Mejor manejo de errores y transacciones
- Conceptos b√°sicos de hilos y procesos
"""
    
# =============================================================================
# IMPORTS - Importaciones necesarias para el funcionamiento
# =============================================================================
import multiprocessing
from data_access.database_connection import DatabaseConnection
from business_logic.game_engine import GameEngine
from database.models import Jugador


# =============================================================================
# FUNCIONES DE INTERFAZ DE USUARIO
# =============================================================================

def mostrar_menu():
    """
    Muestra el men√∫ principal del juego con todas las opciones disponibles.
    
    Este men√∫ permite al usuario:
    - Jugar una partida de torneo
    - Ver estad√≠sticas de jugadores
    - Reiniciar mazos de cartas
    - Limpiar estad√≠sticas
    - Salir del juego
    """
    print("\n" + "="*50)
    print("üéÆ JUEGO DE CARTAS - VERSI√ìN OPTIMIZADA")
    print("="*50)
    print("1. Jugar una partida")
    print("2. Ver estad√≠sticas")
    print("3. Reiniciar mazos")
    print("4. Limpiar estad√≠sticas")
    print("5. Salir")
    print("-"*50)


def mostrar_estadisticas(engine: GameEngine):
    """
    Muestra las estad√≠sticas detalladas de todos los jugadores.
    
    Calcula y muestra:
    - N√∫mero de victorias y derrotas
    - Total de partidas jugadas
    - Porcentaje de victoria
    - Ranking de jugadores
    
    Args:
        engine: Instancia del motor del juego que contiene la l√≥gica de negocio
    """
    print("\nüìä ESTAD√çSTICAS DE JUGADORES")
    print("-"*30)
    
    # Obtener estad√≠sticas desde la base de datos
    jugadores = engine.obtener_estadisticas()
    if not jugadores:
        print("No hay jugadores registrados.")
        return
    
    # Mostrar estad√≠sticas de cada jugador
    for jugador in jugadores:
        # Calcular total de partidas y porcentaje de victoria
        total_partidas = jugador.victorias + jugador.derrotas
        porcentaje_victoria = (jugador.victorias / total_partidas * 100) if total_partidas > 0 else 0
        
        # Mostrar informaci√≥n formateada
        print(f"{jugador.nombre}:")
        print(f"  Victorias: {jugador.victorias}")
        print(f"  Derrotas: {jugador.derrotas}")
        print(f"  Total partidas: {total_partidas}")
        print(f"  Porcentaje victoria: {porcentaje_victoria:.1f}%")
        print()


# =============================================================================
# FUNCIONES DE L√ìGICA DE JUEGO
# =============================================================================

def jugar_partida(engine: GameEngine):
    """
    Ejecuta una partida completa del torneo con 5 jugadores.
    
    Esta funci√≥n:
    1. Inicia el sistema de concurrencia (3 procesos + 5 hilos)
    2. Coordina la partida de 3 rondas
    3. Determina el ranking final
    4. Actualiza estad√≠sticas en la base de datos
    5. Muestra el resultado del torneo
    
    Args:
        engine: Instancia del motor del juego
    """
    # Lista de jugadores que participar√°n en el torneo
    nombres_jugadores = ["Jugador 1", "Jugador 2", "Jugador 3", "Jugador 4", "Jugador 5"]
    
    try:
        # Informar inicio de la partida
        print(f"\nüéØ Iniciando partida entre {len(nombres_jugadores)} jugadores...")
        print(f"üë• Jugadores: {', '.join(nombres_jugadores)}")
        
        # Iniciar la partida usando el motor del juego
        # Esto activar√° el sistema de concurrencia completo
        resultado = engine.iniciar_partida(nombres_jugadores)
        
        # Mostrar resultado final del torneo
        print("\n" + "üèÅ"*20)
        print("RESULTADO FINAL")
        print("üèÅ"*20)
        print(f"üèÜ GANADOR: {resultado.ganador}")
        print(f"üíÄ PERDEDOR: {resultado.perdedor}")
        print(f"üìù Cartas jugadas: {len(resultado.cartas_jugadas)}")
        print(f"üë• Participantes: {', '.join(['Jugador 1', 'Jugador 2', 'Jugador 3', 'Jugador 4', 'Jugador 5'])}")
        
    except ValueError as e:
        # Error de validaci√≥n (jugadores inv√°lidos, mazos vac√≠os, etc.)
        print(f"‚ùå Error: {e}")
    except Exception as e:
        # Error inesperado del sistema
        print(f"‚ùå Error inesperado: {e}")


def reiniciar_mazos(engine: GameEngine):
    """
    Reinicia los mazos de todos los jugadores con nuevas cartas aleatorias.
    
    Esta funci√≥n:
    1. Limpia los mazos actuales de todos los jugadores
    2. Asigna 4 cartas aleatorias a cada jugador
    3. Garantiza que los mazos est√©n balanceados
    
    Args:
        engine: Instancia del motor del juego
    """
    # Lista de jugadores cuyos mazos ser√°n reiniciados
    nombres_jugadores = ["Jugador 1", "Jugador 2", "Jugador 3", "Jugador 4", "Jugador 5"]
    
    try:
        print("\nüîÑ Reiniciando mazos...")
        # Llamar al m√©todo del motor para reiniciar mazos
        engine.reiniciar_mazos(nombres_jugadores)
        print("‚úÖ Mazos reiniciados exitosamente")
    except Exception as e:
        print(f"‚ùå Error al reiniciar mazos: {e}")


def limpiar_estadisticas(engine: GameEngine):
    """
    Limpia todas las estad√≠sticas de victorias y derrotas de todos los jugadores.
    
    Esta funci√≥n resetea:
    - Contador de victorias a 0
    - Contador de derrotas a 0
    - Mantiene los jugadores registrados
    
    Args:
        engine: Instancia del motor del juego
    """
    try:
        print("\nüßπ Limpiando estad√≠sticas...")
        # Llamar al m√©todo del motor para limpiar estad√≠sticas
        engine.limpiar_estadisticas()
        print("‚úÖ Estad√≠sticas limpiadas exitosamente")
    except Exception as e:
        print(f"‚ùå Error al limpiar estad√≠sticas: {e}")


# =============================================================================
# FUNCI√ìN PRINCIPAL - Punto de entrada de la aplicaci√≥n
# =============================================================================

def main():
    """
    Funci√≥n principal que inicializa y ejecuta el sistema de torneo de cartas.
    
    FLUJO DE EJECUCI√ìN:
    1. Inicializar la base de datos
    2. Crear el motor del juego
    3. Mostrar men√∫ principal en bucle
    4. Procesar opciones del usuario
    5. Cerrar conexi√≥n a la base de datos al salir
    """
    print("üöÄ Inicializando Juego de Cartas...")
    
    # =========================================================================
    # INICIALIZACI√ìN DE LA BASE DE DATOS
    # =========================================================================
    try:
        # Crear conexi√≥n a la base de datos usando patr√≥n Singleton
        db_connection = DatabaseConnection()
        # Inicializar tablas y datos necesarios
        db_connection.initialize_database()
        print("‚úÖ Base de datos inicializada correctamente")
    except Exception as e:
        print(f"‚ùå Error al inicializar la base de datos: {e}")
        return
    
    # =========================================================================
    # CREACI√ìN DEL MOTOR DEL JUEGO
    # =========================================================================
    # Crear instancia del motor que maneja toda la l√≥gica de negocio
    engine = GameEngine()
    
    # =========================================================================
    # BUCLE PRINCIPAL DE LA APLICACI√ìN
    # =========================================================================
    while True:
        try:
            # Mostrar men√∫ de opciones
            mostrar_menu()
            
            # Obtener selecci√≥n del usuario
            opcion = input("Selecciona una opci√≥n (1-5): ").strip()
            
            # Procesar la opci√≥n seleccionada
            if opcion == "1":
                # Iniciar una partida de torneo
                jugar_partida(engine)
            elif opcion == "2":
                # Mostrar estad√≠sticas de jugadores
                mostrar_estadisticas(engine)
            elif opcion == "3":
                # Reiniciar mazos de cartas
                reiniciar_mazos(engine)
            elif opcion == "4":
                # Limpiar estad√≠sticas
                limpiar_estadisticas(engine)
            elif opcion == "5":
                # Salir del juego
                print("\nüëã ¬°Gracias por jugar! ¬°Hasta luego!")
                break
            else:
                # Opci√≥n inv√°lida
                print("‚ùå Opci√≥n inv√°lida. Por favor, selecciona 1-5.")
                
        except KeyboardInterrupt:
            # Manejar interrupci√≥n del usuario (Ctrl+C)
            print("\n\nüëã ¬°Juego interrumpido! ¬°Hasta luego!")
            break
        except Exception as e:
            # Manejar errores inesperados
            print(f"‚ùå Error inesperado: {e}")
    
    # =========================================================================
    # LIMPIEZA Y CIERRE
    # =========================================================================
    # Cerrar conexi√≥n a la base de datos de forma segura
    try:
        db_connection.close_connection()
        print("‚úÖ Conexi√≥n a la base de datos cerrada")
    except:
        pass

if __name__ == "__main__":
    main() 